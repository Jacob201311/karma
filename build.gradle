
task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task findbugs(
        group: "Verification", 
        description: "Marker task to enabled findbugs."
    )

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
        
    repositories {
        jcenter()
    }
}

subprojects {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    configurations {
    
        providedCompile
        all*.exclude group: 'javax.jms', module: 'jms'
        all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
        all*.exclude group: 'com.sun.jmx', module: 'jmxri'
        published
    
    }
    
    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    
    version =  '1.0'
    group = 'com.duitang.service'
    
    eclipse.classpath {
        defaultOutputDir = file('build/classes/main')
        file.withXml { n ->
            n.asNode().classpathentry.findAll { it.@path.startsWith('src/test') }
                    .each { it.@output = 'build/classes/test' }
        }
    }
    
    sourceSets {
       main {
         //if you truly want to override the defaults:
         output.resourcesDir = 'build/classes/main'
       }
       test {
         //if you truly want to override the defaults:
         output.resourcesDir = 'build/classes/test'
       }
    }
    
    repositories {
        mavenCentral()
    }
    
    version =  '1.0'
    group = 'com.duitang.service'
    
    task pom << {
        pom {
            project {
                inceptionYear '2016'
            }
        }.writeTo("pom.xml")
    }
    
    eclipse {
        classpath {
           downloadSources=true
           downloadJavadoc=true
           defaultOutputDir = file('build/classes/main/')
        }
    }
    
    test {
        exclude 'java/**'
        exclude 'com/**'
        ignoreFailures = true
        testLogging {
            showStandardStreams = true
        }
    }
    
    task runTests(type: Test) {
        exclude 'com/**'
        exclude 'java/**'
    }
    
    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    
    findbugsMain {
      reports {
        xml.enabled = false
        html.enabled = true
      }
    }
    
    findbugs { 
        // your findbugs configuration.
        ignoreFailures = true 
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.findbugsMain.onlyIf { 
            taskGraph.hasTask((tasks.findbugs))
        }
        tasks.findbugsTest.onlyIf {  
               taskGraph.hasTask((tasks.findbugs)) 
        }
    }

}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}
